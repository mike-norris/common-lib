/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java library project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.5/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the java-library plugin for API and implementation separation.
    id 'java-library'
    id 'org.springframework.boot' version '3.4.0'
    id 'io.spring.dependency-management' version '1.1.6'
    id 'java'
    id 'maven-publish'
    id 'jacoco'
    id 'idea'
}

group = 'com.openrangelabs.middleware'
version = '2024.12.7'

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

ext {
    set('springCloudVersion', "2024.0.0")
}

dependencies {
    // Spring Boot Web (already in your file)
    api 'org.springframework.boot:spring-boot-starter-web'
    api 'org.springframework.boot:spring-boot-starter-webflux'

    // Spring Cloud (already in your file)
    implementation 'org.springframework.cloud:spring-cloud-starter-config'
    implementation 'org.springframework.cloud:spring-cloud-starter'
    implementation 'org.springframework.cloud:spring-cloud-starter-bootstrap'

    // JPA (already in your file)
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

    // HTTP Client (already in your file)
    api 'org.apache.httpcomponents.client5:httpclient5:5.2.1'

    // Lombok (already in your file)
    annotationProcessor 'org.projectlombok:lombok'
    compileOnly 'org.projectlombok:lombok'

    // === REQUIRED DEPENDENCIES ===

    // Validation - REQUIRED for all the validation annotations
    api 'org.springframework.boot:spring-boot-starter-validation'

    // Jackson - REQUIRED for JSON serialization with DTOs
    api 'com.fasterxml.jackson.core:jackson-databind'
    api 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'

    // === WEBCLIENT DEPENDENCIES ===

    // Reactor Netty - REQUIRED for enhanced WebClient configuration
    api 'io.projectreactor.netty:reactor-netty-http'

    // Netty dependencies are usually included with spring-boot-starter-webflux
    // but explicitly declaring for enhanced WebClient features
    implementation 'io.netty:netty-handler'
    implementation 'io.netty:netty-codec-http'
    implementation 'io.netty:netty-transport-native-epoll'
    implementation 'io.netty:netty-resolver-dns'

    // === OPTIONAL DEPENDENCIES ===

    // RabbitMQ - ONLY if you want to use messaging features
    // Uncomment this line if you need RabbitMQ support:
    api 'org.springframework.boot:spring-boot-starter-amqp'

    // === TEST DEPENDENCIES ===

    // Spring Boot Test (already in your file)
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    // JUnit (keep both for compatibility)
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-api'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // Mockito for JUnit 5 - REQUIRED for new tests
    testImplementation 'org.mockito:mockito-junit-jupiter'

    // WebClient testing support
    testImplementation 'com.squareup.okhttp3:mockwebserver:5.0.0-alpha.16'
    testImplementation 'org.springframework:spring-webflux' // For WebTestClient if needed

    // This dependency is exported to consumers, that is to say found on their compile classpath.
    // api libs.commons.math3

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    // implementation libs.guava
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    sourceCompatibility = JavaLanguageVersion.of(17)
}

bootJar {
    enabled = false
}

jar {
    enabled = true
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

publishing {
    publications {
        library(MavenPublication) {
            from components.java
        }
    }
}

jacoco {
    toolVersion = "0.8.10" // Specify the JaCoCo version (optional)

    reportsDirectory = layout.buildDirectory.dir('customJacocoReportDir') // Optional: Customize report directory
}

tasks.named("jar") {
    archiveClassifier.set("") // Set an empty classifier
}

tasks.named('test') {
    useJUnitPlatform()
}

tasks.jacocoTestReport {
    dependsOn test // Make sure the report is generated after the tests run

    reports {
        xml.required = true // Generate XML report (required for CI/CD)
        csv.required = false // Generate CSV report (optional)
        html.required = true // Generate HTML report (for viewing in browser)
    }
}